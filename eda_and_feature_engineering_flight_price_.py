# -*- coding: utf-8 -*-
"""EDA And Feature Engineering Flight Price .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q_BDmeesXC4hBik3kzsX3LRhRX68bsIM

EDA And Feature Engineering Flight Price Prediction

Data Source : https://www.kaggle.com/datasets/shubhambathwal/flight-price-prediction

FEATURES

The various features of the cleaned dataset are explained below:


1) Airline: The name of the airline company is stored in the airline column. It is a categorical feature having 6 different airlines.


2) Flight: Flight stores information regarding the plane's flight code. It is a categorical feature.


3) Source City: City from which the flight takes off. It is a categorical feature having 6 unique cities.


4) Departure Time: This is a derived categorical feature obtained created by grouping time periods into bins. It stores information about the departure time and have 6 unique time labels.


5) Stops: A categorical feature with 3 distinct values that stores the number of stops between the source and destination cities.


6) Arrival Time: This is a derived categorical feature created by grouping time intervals into bins. It has six distinct time labels and keeps information about the arrival time.


7) Destination City: City where the flight will land. It is a categorical feature having 6 unique cities.


8) Class: A categorical feature that contains information on seat class; it has two distinct values: Business and Economy.


9) Duration: A continuous feature that displays the overall amount of time it takes to travel between cities in hours.


10)Days Left: This is a derived characteristic that is calculated by subtracting the trip date by the booking date.


11) Price: Target variable stores information of the ticket price.
"""

# Commented out IPython magic to ensure Python compatibility.
#importing all important libararies

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

df=pd.read_excel("/content/sample_data/flight_price.xlsx")

df.head()

#get the basic info about dataset

df.info()

# get the description of the dataset

df.describe()

#apply the feature engineering to each and every column that are require for creating perfect dataset

"""take the Date_of_Journey column and split the date in date, month, year"""

df["Date"]=df["Date_of_Journey"].str.split("/").str[0]
df["Month"]=df["Date_of_Journey"].str.split("/").str[1]
df["Year"]=df["Date_of_Journey"].str.split("/").str[2]

df.info()

### change the type of Date, month and year column

df['Date']=df['Date'].astype(int)
df['Month']=df['Month'].astype(int)
df['Year']=df['Year'].astype(int)

df.info()

# Drop the Date_of_Journey column as we don't need anymore

df.drop("Date_of_Journey", axis=1, inplace=True)

df.head()

#now take the Arrival_Time column

df['Arrival_Time']=df['Arrival_Time'].apply(lambda x:x.split(' ')[0])

df["Arrival_hour"]=df["Arrival_Time"].str.split(":").str[0]
df["Arrival_min"]=df["Arrival_Time"].str.split(":").str[1]

df.head()

#change the datatype of  arrival hour and arrival min

df["Arrival_hour"]=df["Arrival_hour"].astype(int)
df["Arrival_min"]=df["Arrival_min"].astype(int)

# now drop the Arrival_Time column

df.drop('Arrival_Time',axis=1,inplace=True)

df.head(2)

#now take the Dep_Time Column
#split the Dep_time into Departure_hour and Departure_Min

df['Departure_hour']=df['Dep_Time'].str.split(':').str[0]

df['Departure_min']=df['Dep_Time'].str.split(':').str[1]

#now change the type of data

df["Departure_hour"]=df["Departure_hour"].astype(int)
df["Departure_min"]=df["Departure_min"].astype(int)

df.info()

# now drop the Dep_Time column


df.drop('Dep_Time',axis=1,inplace=True)

df.head(2)

# now find the unique values of Total_Stops

df['Total_Stops'].unique()

#Find the null value within the Total_Stops

df[df["Total_Stops"].isnull()]

df['Total_Stops'].mode()

df['Total_Stops'].unique()

##Now replace all these value with 0,1,2,3,4
#repalce non-stop=0
#replace 1stop=1,
#replace  2stop=2,
#replace  3stop=3,
#replace  4stop=4,
#replace  nan= 1

df['Total_Stops']=df['Total_Stops'].map({'non-stop':0,'1 stop':1,'2 stops':2,'3 stops':3,'4 stops':4,np.nan:1})

df[df['Total_Stops'].isnull()]  #no nan value within the Total_Stops column

df.head(2)

# now we can see that we don't need Route column

df.drop('Route',axis=1,inplace=True)

df.head(2)

# now take the Duration Column

df['Duration_hour']=df['Duration'].str.split('h').str[0]
df['Duration_min']=df['Duration'].str.split('m').str[1]

df.head(2)

# drop the Duration Column

df.drop("Duration", axis=1, inplace=True)

df.head(2)

#now find the Unique  values within the airline, Source, Additional_Info column

df["Airline"].unique()

df['Source'].unique()

df['Additional_Info'].unique()

df['Destination'].unique()

# now we can procced with the categorical columns

#apply the OneHotEncoder technique

from sklearn.preprocessing import OneHotEncoder

encoder=OneHotEncoder()

encoder.fit_transform(df[['Airline','Source','Destination']]).toarray()

pd.DataFrame(encoder.fit_transform(df[['Airline','Source','Destination']]).toarray(),columns=encoder.get_feature_names_out())

df.head()

